#version 460 core

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D screen;

// ----CONSTANTS----
const float inf = 1.0f / 0.0f;


struct PayLoad
{
    int dat;
};

struct Ray
{
    vec3 origin;
    vec3 direction;
    vec3 invDirection;
    float t;
    PayLoad data;
};

struct BoundingBox
{
    vec3 min, max;
};
void grow(inout BoundingBox box, in vec3 vec)
{
    box.min = min(box.min, vec);
    box.max = max(box.max, vec);
}
void grow(inout BoundingBox box, in BoundingBox other)
{
    grow(box, other.min);
    grow(box, other.max);
}
float area(in BoundingBox box)
{
    vec3 extent = box.max - box.min;
    return extent.x * extent.y + extent.y * extent.z + extent.z * extent.x;
}
float intersect(in BoundingBox box, in Ray ray)
{
    float tx1 = (box.min.x - ray.origin.x) * ray.invDirection.x, tx2 = (box.max.x - ray.origin.x) * ray.invDirection.x;
    float tmin = min(tx1, tx2), tmax = max(tx1, tx2);
    float ty1 = (box.min.y - ray.origin.y) * ray.invDirection.y, ty2 = (box.max.y - ray.origin.y) * ray.invDirection.y;
    tmin = min(tmin, min(ty1, ty2)); tmax = max(tmax, max(ty1, ty2));
    float tz1 = (box.min.z - ray.origin.z) * ray.invDirection.z, tz2 = (box.max.z - ray.origin.z) * ray.invDirection.z;
    tmin = min(tmin, min(tz1, tz2)); tmax = max(tmax, max(tz1, tz2));
    if (tmax >= tmin && tmin < ray.t && tmax > 0) return tmin;
    return inf;
}


struct Primitive // Primitive could be anything, in this case its a box
{
    vec3 min, max;
};
void intersect(inout Primitive primitive, inout Ray ray)
{
    BoundingBox box;
    box.min = primitive.min;
    box.max = primitive.max;
    float intersection = intersect(box, ray);
    if (intersection < ray.t)
    {
        ray.t = intersection;
    }
}
vec3 centroid_(inout Primitive primitive)
{
    return (primitive.min + primitive.max) / 2.0f;
}

struct BvhNode
{
    BoundingBox box;
    uint leftFirst, primitiveCount;
};
bool isLeaf(in BvhNode node) { return node.primitiveCount > 0; }

layout(std430, binding = 0) buffer PrimitivesData
{
    Primitive primitives[];
};

layout(std430, binding = 1) buffer PrimitiveIds
{
    uint primitiveIDs[];
};

layout(std430, binding = 2) buffer BVHnodesData
{
    BvhNode bvhNodes[];
};
layout(std430, binding = 3) buffer MetaData
{
    uint rootNodeID;
    uint nodesUsed;
};

void intersect(in Ray ray, const uint nodeID)
{
    BvhNode node = bvhNodes[nodeID], stack[64];
    uint stackPtr = 0;
    while (true)
    {
        if (isLeaf(node))
        {
            for (uint i = 0; i < node.primitiveCount; i++)
            {
                intersect(primitives[primitiveIDs[node.leftFirst + i]], ray);
            }
            if (stackPtr == 0)
                break;
            else
            {
                stackPtr -= 1;
                node = stack[stackPtr];
            }
            continue;
        }
        BvhNode child1 = bvhNodes[node.leftFirst];
        BvhNode child2 = bvhNodes[node.leftFirst + 1];
        float dist1 = intersect(child1.box, ray);
        float dist2 = intersect(child2.box, ray);
        if (dist1 > dist2)
        {
            float temp1 = dist1;
            dist1 = dist2;
            dist2 = temp1;

            BvhNode temp2 = child1;
            child1 = child2;
            child2 = temp2;
        }
        if (dist1 == inf)
        {
            if (stackPtr == 0) break;
            else
            {
                stackPtr -= 1;
                node = stack[stackPtr];
            }
        }
        else
        {
            node = child1;
            if (dist2 != inf)
            {
                stack[stackPtr] = child2;
                stackPtr += 1;
            }
        }
    }    
}

void intersect(in Ray ray)
{
    intersect(ray, rootNodeID);
}

const vec3 p0 = vec3( -1, 1, 5 ), p1 = vec3( 1, 1, 5 ), p2 = vec3( -1, -1, 5 );


void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

    vec3 pixelPos = p0 + (p1 - p0) * (pixel_coords.x / 500.0f) + (p2 - p0) * (pixel_coords.y / 500.0f);

    Ray ray;    
    ray.origin = vec3(0, 0, 0);
    ray.direction = normalize(pixelPos - ray.origin);
    ray.invDirection = vec3(1.0f / ray.direction.x, 1.0f / ray.direction.y, 1.0f / ray.direction.z);

    intersect(ray);

    vec4 pixel;
    if (ray.t != inf)
    {
        pixel = vec4(1, 1, 1, 1);
    }
    else
    {
        pixel = vec4(0, 0, 0, 0);
    }

    imageStore(screen, pixel_coords, pixel);
}